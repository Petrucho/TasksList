{"version":3,"sources":["Components/TaskClick.js","redux/actions.js","redux/types.js","Components/TasksListWithCheck.js","Components/AddTask.js","Components/Footer.js","Components/App.js","serviceWorker.js","redux/reducer.js","index.js"],"names":["TaskClick","this","props","task","index","className","id","username","email","text","status","Component","addTaskAC","curUser","curEmail","taskName","dispatch","a","fetch","method","headers","Accept","body","JSON","stringify","response","json","myJson","type","message","loadedTasksId","title","console","log","getTasksAC","sortField","sortDirection","pageN","data","tasks","loadedTasks","totalTasksCount","total_task_count","changePageAC","pageNumber","currPage","err","changeSortByFieldAC","sort_field","changeTypeOfSortAC","sort_direction","TasksListWithCheck","state","tasksFetch","prevProps","getTasks","currUser","map","i","key","connect","currEmail","page","AddTask","onChange","e","setState","target","value","onSubmit","addTask","onClick","Footer","innerText","changePage","Math","ceil","pagination","onClickSortByField","changeSortByField","onClickTypeOfSort","changeTypeOfSort","App","Boolean","window","location","hostname","match","initialState","composeEnchanters","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","done","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e564ea83.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TaskClick extends Component {\n  render() {\n    const { task, index } = this.props;\n    return (\n      <div className=\"Task\">\n        {index} - id:{task.id} username:{task.username} email:{task.email} text:{task.text} status:\n        {task.status}\n      </div>\n    );\n  }\n}\n\nexport default TaskClick;\n","import { ADD_TASK, GET_TASKS, CHANGE_PAGE, SORT_BY_FIELD, TYPE_OF_SORT } from './types';\r\n\r\nconst addTaskAC = (curUser, curEmail, taskName) => async dispatch => {\r\n  try {\r\n    const response = await fetch(`https://uxcandy.com/~shapoval/test-task-backend/v2/create?developer=${curUser}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        username: curUser,\r\n        email: curEmail,\r\n        text: taskName,\r\n      }),\r\n    });\r\n    const myJson = await response.json();\r\n    if (myJson.status === 'ok') {\r\n      dispatch({\r\n        type: ADD_TASK,\r\n        username: myJson.message.username,\r\n        email: myJson.message.email,\r\n        loadedTasksId: myJson.message.id,\r\n        title: myJson.message.text,\r\n      });\r\n    }\r\n  } catch (err) {\r\n    console.log(`Error with ADDING TASK: ${err}\\n`);\r\n  }\r\n};\r\n\r\n\r\nconst getTasksAC = (curUser, sortField, sortDirection, pageN) => async dispatch => {\r\n  try {\r\n    const response = await fetch(\r\n      `https://uxcandy.com/~shapoval/test-task-backend/v2/?developer=${curUser}&sort_field=${sortField}&sort_direction=${sortDirection}&page=${pageN}`,\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n      },\r\n    );\r\n    const myJson = await response.json();\r\n    const data = myJson.message.tasks;\r\n    if (myJson.status === 'ok') {\r\n      dispatch({\r\n        type: GET_TASKS,\r\n        loadedTasks: data,\r\n        totalTasksCount: myJson.message.total_task_count,\r\n      });\r\n    }\r\n  } catch (err) {\r\n    console.log(`Error with loading TASKS: ${err}\\n`);\r\n  }\r\n};\r\n\r\nconst changePageAC = pageNumber => {\r\n  try {\r\n    return {\r\n      type: CHANGE_PAGE,\r\n      currPage: pageNumber,\r\n    };\r\n  } catch (err) {\r\n    console.log(`Error with CHANGING PAGE: ${err}\\n`);\r\n  }\r\n};\r\n\r\nconst changeSortByFieldAC = sortField => {\r\n  try {\r\n    return {\r\n      type: SORT_BY_FIELD,\r\n      sort_field: sortField,\r\n    };\r\n  } catch (err) {\r\n    console.log(`Error with SORTING BY FIELD: ${err}\\n`);\r\n  }\r\n};\r\n\r\nconst changeTypeOfSortAC = sortDirection => {\r\n  try {\r\n    return {\r\n      type: TYPE_OF_SORT,\r\n      sort_direction: sortDirection,\r\n    };\r\n  } catch (err) {\r\n    console.log(`Error with TYPE OF SORT: ${err}\\n`);\r\n  }\r\n};\r\n\r\nexport { addTaskAC, getTasksAC, changePageAC, changeSortByFieldAC, changeTypeOfSortAC };\r\n","export const ADD_TASK = 'ADD_TASK';\r\nexport const GET_TASKS = 'GET_TASKS';\r\nexport const CHANGE_PAGE = 'CHANGE_PAGE';\r\nexport const SORT_BY_FIELD = 'SORT_BY_FIELD';\r\nexport const TYPE_OF_SORT = 'TYPE_OF_SORT';\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport TaskClick from './TaskClick';\nimport { getTasksAC } from '../redux/actions';\n\nclass TasksListWithCheck extends Component {\n  state = {};\n\n  componentDidMount() {\n    this.tasksFetch();\n  }\n\n  componentDidUpdate(prevProps) {\n    if ((prevProps.currPage !== this.props.currPage) || (prevProps.sort_field !== this.props.sort_field)||(prevProps.sort_direction !== this.props.sort_direction)) {\n      this.tasksFetch();\n    }\n  }\n\n  tasksFetch() {\n    const somePromise = this.props.getTasks(\n      this.props.currUser,\n      this.props.sort_field,\n      this.props.sort_direction,\n      this.props.currPage,\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.props.tasks.map((task, i) => (\n          <TaskClick task={task} index={i + 1} key={i} />\n        ))}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    tasks: state.tasks,\n    sort_field: state.sort_field,\n    sort_direction: state.sort_direction,\n    currPage: state.currPage,\n    currUser: state.currUser,\n    currEmail: state.currEmail,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getTasks: (curUser, sort_field, sort_direction, page) =>\n      dispatch(getTasksAC(curUser, sort_field, sort_direction, page)),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TasksListWithCheck);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { addTaskAC } from '../redux/actions';\n\nclass AddTask extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      title: '',\n    };\n  }\n\n  onChange = e => {\n    this.setState({ title: e.target.value });\n  };\n\n  onSubmit = () => {\n    this.props.addTask('test', 'test@test.com', 'test job');\n    this.setState({ title: '' });\n  };\n\n  render() {\n    return (\n      <div className=\"AddTask\">\n        <input onChange={this.onChange} value={this.state.title} />\n        <button onClick={this.onSubmit}>Append task</button>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    currUser: state.currUser,\n    currEmail: state.currEmail,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addTask: (curUser, curEmail, taskName) => dispatch(addTaskAC(curUser, curEmail, taskName)),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(AddTask);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { changePageAC, changeSortByFieldAC, changeTypeOfSortAC } from '../redux/actions';\n\nclass Footer extends Component {\n  state = {};\n\n  onClick = e => {\n    switch (e.target.innerText) {\n      case 'First page':\n        this.props.changePage(1);\n        break;\n      case 'Prev page':\n        if (this.props.currPage > 1) {\n          this.props.changePage(this.props.currPage - 1);\n        }\n        break;\n      case 'Next page':\n        if (Math.ceil(this.props.totalTasksCount / this.props.pagination) >= this.props.currPage + 1) {\n          this.props.changePage(this.props.currPage + 1);\n        }\n        break;\n      case 'Last page':\n        if (this.props.currPage < Math.ceil(this.props.totalTasksCount / this.props.pagination)) {\n          this.props.changePage(Math.ceil(this.props.totalTasksCount / this.props.pagination));\n        }\n        break;\n      default:\n        this.props.changePage(1);\n    }\n  };\n\n  onClickSortByField = e => {\n    switch (e.target.innerText) {\n      case 'Sort by ID':\n        this.props.changeSortByField('id');\n        break;\n      case 'Sort by username':\n        this.props.changeSortByField('username');\n        break;\n      case 'Sort by email':\n        this.props.changeSortByField('email');\n        break;\n      case 'Sort by status':\n        this.props.changeSortByField('status');\n        break;\n      default:\n        this.props.changeSortByField('id');\n    }\n  };\n\n  onClickTypeOfSort = e => {\n    switch (e.target.innerText) {\n      case 'ASC':\n        this.props.changeTypeOfSort('asc');\n        break;\n      case 'DESC':\n        this.props.changeTypeOfSort('desc');\n        break;\n      default:\n        this.props.changeTypeOfSort('asc');\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"Footer\">\n        <div className=\"Buttons\">\n          <p>Current page {this.props.currPage}</p>\n          <button onClick={this.onClick}>First page</button>\n          <button onClick={this.onClick}>Prev page</button>\n          <button onClick={this.onClick}>Next page</button>\n          <button onClick={this.onClick}>Last page</button>\n        </div>\n        <div className=\"SortingField\">\n          <p>Current sorting field: {this.props.sort_field}</p>\n          <button onClick={this.onClickSortByField}>Sort by ID</button>\n          <button onClick={this.onClickSortByField}>Sort by username</button>\n          <button onClick={this.onClickSortByField}>Sort by email</button>\n          <button onClick={this.onClickSortByField}>Sort by status</button>\n        </div>\n        <div className=\"SortingType\">\n          <p>Type of sorting: {this.props.sort_direction}</p>\n          <button onClick={this.onClickTypeOfSort}>ASC</button>\n          <button onClick={this.onClickTypeOfSort}>DESC</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    currPage: state.currPage,\n    totalTasksCount: state.totalTasksCount,\n    pagination: state.pagination,\n    sort_field: state.sort_field,\n    sort_direction: state.sort_direction,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changePage: pageNumber => dispatch(changePageAC(pageNumber)),\n    changeSortByField: sortField => dispatch(changeSortByFieldAC(sortField)),\n    changeTypeOfSort: sortDirection => dispatch(changeTypeOfSortAC(sortDirection)),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Footer);\n","import React from 'react';\n\nimport TasksListWithCheck from './TasksListWithCheck';\nimport AddTask from './AddTask';\nimport Footer from './Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TasksListWithCheck />\n      <AddTask />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_TASK,  GET_TASKS, CHANGE_PAGE, SORT_BY_FIELD, TYPE_OF_SORT } from './types';\r\n\r\nconst initialState = {\r\n  tasks: [],\r\n  sort_field: 'id', //(id | username | email | status) - поле, по которому выполняется сортировка\r\n  sort_direction: 'asc', //(asc | desc) - направление сортировки\r\n  currPage: 1, // номер страницы для пагинации\r\n  totalTasksCount: 0,\r\n  currUser: 'admin',\r\n  currEmail: 'example@example.com',\r\n  pagination: 3,\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TASK: {\r\n      return {\r\n        tasks: [...state.tasks, { title: action.title, done: false }],\r\n      };\r\n    }\r\n\r\n    case GET_TASKS: {\r\n      return {\r\n        ...state,\r\n        tasks: action.loadedTasks,\r\n        totalTasksCount: action.totalTasksCount,\r\n      };\r\n    }\r\n\r\n    case CHANGE_PAGE: {\r\n      return {\r\n        ...state,\r\n        currPage: action.currPage,\r\n      };\r\n    }\r\n\r\n    case SORT_BY_FIELD: {\r\n      return {\r\n        ...state,\r\n        sort_field: action.sort_field,\r\n      };\r\n    }\r\n\r\n    case TYPE_OF_SORT: {\r\n      return {\r\n        ...state,\r\n        sort_direction: action.sort_direction,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './redux/reducer'\n\nconst composeEnchanters = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnchanters(applyMiddleware(thunk)));  \n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}